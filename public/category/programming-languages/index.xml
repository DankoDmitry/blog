<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming languages | Academic</title>
    <link>https://example.com/category/programming-languages/</link>
      <atom:link href="https://example.com/category/programming-languages/index.xml" rel="self" type="application/rss+xml" />
    <description>programming languages</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sat, 04 Jun 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://example.com/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>programming languages</title>
      <link>https://example.com/category/programming-languages/</link>
    </image>
    
    <item>
      <title>Initialization system System V</title>
      <link>https://example.com/post/system-init-sysv/</link>
      <pubDate>Sat, 04 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/system-init-sysv/</guid>
      <description>&lt;h1 id=&#34;--что-это-и-зачем&#34;&gt;- Что это и зачем?&lt;/h1&gt;
&lt;p&gt;System V is a version of the Unix operating system released in 1983.&lt;/p&gt;
&lt;p&gt;The initialization system in UNIX and Linux is a set of programs for managing the formation of a working environment: a text / graphical working environment or a service node of a computer network. The traditional name for a main program is init. Her PID = 1.&lt;/p&gt;
&lt;p&gt;Init is the parent of all processes. Its main task is to create scripted processes from the /etc/inittab file. This file usually contains entries that tell init to spawn getty for each line that users can log in to. It also controls the offline processes required by any system. A runlevel is a programmatic configuration of a system that allows only a given group of processes to exist. The processes spawned by init at each of these runlevels are defined in the /etc/inittab file.&lt;/p&gt;
&lt;p&gt;Essentially, init organizes and maintains all user space, which also includes checking and mounting file systems, starting the necessary user services, and switching to user state when the system has finished booting up.&lt;/p&gt;
&lt;h1 id=&#34;--how-does-it-work&#34;&gt;- How does it work?&lt;/h1&gt;
&lt;p&gt;Init systems start daemons with scripts, with each script starting one daemon and each successive script waiting for the previous script to complete.&lt;/p&gt;
&lt;p&gt;A daemon is a process that runs in the background with no connection to a GUI or terminal. Daemons are typically started at system boot and remain operational until the system is shut down. In modern technical documentation, daemons are most commonly referred to as services.&lt;/p&gt;
&lt;h2 id=&#34;process-id-1&#34;&gt;Process ID 1&lt;/h2&gt;
&lt;p&gt;The bootloader transfers control of the system to the OS kernel. After a short period of time, the OS kernel starts the init system daemon. This init system daemon (/sbin/init) is the first daemon started within the system, so the corresponding process gets the process ID 1 (PID 1). The init system daemon never exits.&lt;/p&gt;
&lt;h2 id=&#34;configuration-options-in-the-etcinittab-file&#34;&gt;Configuration options in the /etc/inittab file&lt;/h2&gt;
&lt;p&gt;After the binary file /sbin/init is executed, the configuration file /etc/inittab is read first. In this file, the daemon will look for the value of the initdefault variable (equal to 3 in the example below).&lt;/p&gt;
&lt;h2 id=&#34;variable-initdefault&#34;&gt;Variable initdefault&lt;/h2&gt;
&lt;p&gt;The value of the initdefault variable specifies the default runlevel. On some Linux distributions, the /etc/inittab file contains a short description of runlevels similar to the following translated description from the corresponding Red Hat Enterprise Linux 4 distribution file.&lt;/p&gt;
&lt;p&gt;Execution level 0 corresponds to system shutdown. Runlevel 1 is used for troubleshooting because only the root user can log in, and only the console can log in. Runlevel 3 is typical for servers, while runlevel 5 is typical for desktop computers (those that log in to the system in graphical mode). With the exception of runlevels 0, 1, and 6, the various runlevels may differ depending on the distribution. For example, the Debian distribution and derivative Linux distributions at runlevels 2 and 5 have the ability to log in using a network connection and a GUI. Therefore, you should always refer to the correct description of your system&amp;rsquo;s runlevels.&lt;/p&gt;
&lt;h2 id=&#34;sysinit-script&#34;&gt;sysinit script&lt;/h2&gt;
&lt;p&gt;Script /etc/rc.d/rc.sysinit&lt;/p&gt;
&lt;p&gt;The following line in the /etc/inittab configuration file on Red Hat and derivative distributions looks like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;si::sysinit:/etc/rc.d/rc.sysinit&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This entry means that regardless of the chosen runlevel, the init system will execute the /etc/rc.d/rc.sysinit script. This script initializes the hardware, sets some basic environment variables, populates the /etc/mtab file when mounting filesystems, mounts the swap partition, and performs other necessary actions.&lt;/p&gt;
&lt;p&gt;The egrep command above can be replaced with the similar grep command below:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;grep &amp;ldquo;^# Ini∥Sta∥Che&amp;rdquo;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;initialization-scripts&#34;&gt;Initialization scripts&lt;/h2&gt;
&lt;p&gt;The init daemon will continue reading the /etc/inittab configuration file and jump to the following section:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;l0:0:wait:/etc/rc.d/rc 0
l1:1:wait:/etc/rc.d/rc 1
l2:2:wait:/etc/rc.d/rc 2
l3:3:wait:/etc/rc.d/rc 3
l4:4:wait:/etc/rc.d/rc 4
l5:5:wait:/etc/rc.d/rc 5
l6:6:wait:/etc/rc.d/rc 6&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The init daemon must run the init script with a single parameter that matches the runlevel. In fact, the fields in the configuration file /etc/inittab are separated by colons. The second field describes the execution level at which the command on this line should be executed. Thus, in both cases, only one of the seven commands is executed, depending on the current runlevel set using the initdefault variable.&lt;/p&gt;
&lt;h2 id=&#34;directories-for-storing-init-scripts&#34;&gt;Directories for storing init scripts&lt;/h2&gt;
&lt;p&gt;If you look at the contents of one of the /etc/rcX.d/ directories, you can find many scripts (or script references) whose names start with either the letter K or uppercase S.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[root@RHEL52 rc3.d]# ls -l | tail -4
lrwxrwxrwx 1 root root 19 окт 11  2008 S98haldaemon -&amp;gt; ../init.d/haldaemon
lrwxrwxrwx 1 root root 19 окт 11  2008 S99firstboot -&amp;gt; ../init.d/firstboot
lrwxrwxrwx 1 root root 11 янв 21 04:16 S99local -&amp;gt; ../rc.local
lrwxrwxrwx 1 root root 16 янв 21 04:17 S99smartd -&amp;gt; ../init.d/smartd&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The /etc/rcX.d/ directories only contain links to scripts located in the /etc/init.d/ directory. Links make it possible to use scripts with distinct names. When you move to a new runlevel, all scripts whose names start with the letter K or uppercase S start executing after being sorted alphabetically by name. Scripts whose names begin with the letter K will be executed first with a single parameter, stop. The rest of the scripts whose names begin with the letter S will be executed with a single start parameter passed.&lt;/p&gt;
&lt;p&gt;All of these operations are performed by the /etc/rc.d/rc script on the Red Hat distribution and the /etc/init.d/rc script on the Debian distribution.&lt;/p&gt;
&lt;h2 id=&#34;mingetty-daemons&#34;&gt;mingetty daemons&lt;/h2&gt;
&lt;p&gt;Description of mingetty daemons in /etc/inittab configuration file&lt;/p&gt;
&lt;p&gt;Almost at the end of the /etc/inittab configuration file is a section describing the conditions for starting and restarting several mingetty daemons.&lt;/p&gt;
&lt;h3 id=&#34;run-gettys-in-standard-runlevels&#34;&gt;Run gettys in standard runlevels&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;1:2345:respawn:/sbin/mingetty tty1
2:2345:respawn:/sbin/mingetty tty2
3:2345:respawn:/sbin/mingetty tty3
4:2345:respawn:/sbin/mingetty tty4
5:2345:respawn:/sbin/mingetty tty5
6:2345:respawn:/sbin/mingetty tty6&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;mingetty-daemons-and-binlogin-executable&#34;&gt;Mingetty daemons and /bin/login executable&lt;/h3&gt;
&lt;p&gt;The /sbin/mingetty daemon prints a message to the virtual console and allows you to enter a user ID. It then executes the /bin/login binary, passing in the user ID entered. The /bin/login program checks if the user information is present in the /etc/passwd file and asks for a password (and also checks that it is correct). If the password is correct, the /bin/login program transfers control to the shell specified in the /etc/passwd file.&lt;/p&gt;
&lt;h4 id=&#34;what-are-the-features&#34;&gt;What are the features?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Writing service startup files in bash;&lt;/li&gt;
&lt;li&gt;Sequential start of services;&lt;/li&gt;
&lt;li&gt;Sort launch order using numbers in filenames;&lt;/li&gt;
&lt;li&gt;Commands to start, stop and check the status of services.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Языки программирования</title>
      <link>https://example.com/post/scientific-programming-languages/</link>
      <pubDate>Sat, 28 May 2022 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/scientific-programming-languages/</guid>
      <description>&lt;p&gt;#Сегодня в мире существуют сотни языков программирования. Каждый из нах обладает сильными и слабыми сторонами. Поговорим о самых известных и востребованных.&lt;/p&gt;
&lt;p&gt;##Bash
Сценарии командной оболочки Unix, созданные Кеном Томпсоном в начале 1970-х годов, тесно связаны с языком программирования C. Bash — обновленная оболочка Unix — была впервые выпущена в конце 80-х годов и до сих пор активно разрабатывается. На Bash обычно пишутся сценарии конфигурации сервера, поэтому это хороший выбор для работы в современных облачных средах с контейнерным хранением и микросервисами. Скрипты командной оболочки используются достаточно часто, так что знание этого языка пригодится.&lt;/p&gt;
&lt;p&gt;Также стоит обратить внимание на zsh, который в настоящее время является оболочкой по умолчанию в macOS.&lt;/p&gt;
&lt;p&gt;Области применения: администрирование сервера, инструменты интерфейса командной строки, DevOps, виртуализация.&lt;/p&gt;
&lt;p&gt;##COBOL
Один из старейших языков, используемых до сих пор, был создан Грейс Хоппер в конце 1950-х годов и предназначался для стандартизации разработки крупномасштабных бизнес-приложений на компьютерах. Блестящая концепция, которая до сих пор применяется в кроссплатформенных SDK. Через системы COBOL проходят невероятные 95% транзакций ATM, причем многие из этих устройств работают круглосуточно 365 дней в году. Такие поставщики устройств, как IBM, разрабатывают более мощные машины, предназначенные для COBOL, но продолжают обслуживать и обновлять существующие системы из-за затрат и рисков, связанных с их заменой. В ближайшее время COBOL никуда не уйдет. Это хороший выбор для тех, кто хочет работать с клиентами из финансовой сферы.&lt;/p&gt;
&lt;p&gt;Области применения: банковское дело / финансы, международные корпорации, правительства.&lt;/p&gt;
&lt;p&gt;￼
##C/C++
Эти языки часто занимают вершины различных рейтингов — их ценят за мощность и быстродействие. C был создан в начале 1970-х годов Деннисом Ритчи, C ++ в 1985 году разработал Бьёрн Страуструп. Сегодня два этих языка лежат в основе всего: от ОС и игр до современных научных вычислений и машинного обучения. C и C++ хорошо подходят для требовательных приложений, которым важны низкоуровневый доступ к оборудованию и производительность. Для освоения этих языков нужно время и определенные усилия.&lt;/p&gt;
&lt;p&gt;Область применения: разработка ОС / SDK, встроенные устройства, игровые движки, наука.&lt;/p&gt;
&lt;p&gt;Читайте также:
Какой язык программирования выбрать для изучения и как его быстро выучить?
Популярный, востребованный, доступный: как выбрать язык программирования
Пять языков программирования для начинающих&lt;/p&gt;
&lt;p&gt;##C#
C#, выпущенный Microsoft в 2000 году, был разработан Андерсом Хейлсбергом как кроссплатформенный язык объектно-ориентированного программирования. Сейчас он часто используется для разработки бизнес-приложений, API, игр и многого другого. Благодаря широкому набору функций этот язык подходит для работы с графикой и других задач асинхронного программирования.&lt;/p&gt;
&lt;p&gt;Области применения: корпоративные приложения, разработка программного и пользовательского интерфейса, игры, графика.&lt;/p&gt;
&lt;p&gt;##Dart
Современный язык, разработанный в Google для создания мобильных, десктопных, веб-и серверных приложений. Его создатель Ларс Бак также придумал JavaSript Engine V8. Dart напоминает другие современные языки объектно-ориентированного программирования — C #, TypeScript и Java — и предоставляет обширный набор функций, подходящих для определения сложных взаимодействий, асинхронных операций, анимации и других задач.&lt;/p&gt;
&lt;p&gt;Области применения: кроссплатформенные приложения, облачные сервисы / корпоративные системы, игры, графика.&lt;/p&gt;
&lt;p&gt;##Fortran
Fortran, разработанный в IBM в 1950-х годах Джоном Бакусом, — это язык общего назначения, который был создан для проведения научных и инженерных работ. Он до сих пор широко используется в этих целях, в том числе для контрольного тестирования самых быстрых суперкомпьютеров в мире. Он также применялся в космических и физических исследованиях и моделировании погоды.&lt;/p&gt;
&lt;p&gt;Области применения: аэрокосмическая/оборонная промышленность, научные вычисления, численный анализ.&lt;/p&gt;
&lt;p&gt;##Java
Java — это ООП-язык общего назначения, разработанный в 1990-х годах Джеймсом Гослингом в Sun (сейчас принадлежит Oracle) и предназначенный для компиляции в байт-код для запуска на виртуальной машине Java. К 2020 году к ним относятся практически все виды устройств — от телевизоров и игровых приставок до серверов, телефонов и даже кухонных приборов. Язык широко распространен в корпорациях и университетах, что сделало его популярным как среди начинающих программистов, так и среди опытных разработчиков.&lt;/p&gt;
&lt;p&gt;Области применения: корпоративные приложения, встроенные системы, веб-сервисы, игры.&lt;/p&gt;
&lt;p&gt;##JavaScript
JavaScript разработал Брэндон Айх в 1990-х годах, чтобы добавлять выполнение скриптов на сайты. Сегодня это универсальный язык веб-интерфейса с мощными стандартизированными функциями, которые поддерживаются всеми основными браузерами. JavaScript соответствует стандарту EcmaScript, который обновляется каждые несколько лет с добавлением новых спецификаций языка. Кроме того, JavaScript часто используется для разработки серверных служб и API, мобильных приложений, игр и другого программного обеспечения. Это отличный выбор для изучения и дальнейшего совершенствования.&lt;/p&gt;
&lt;p&gt;Области применения: фулстэк-разработка, облачные сервисы / контейнерное хранение, игры, утилиты.&lt;/p&gt;
&lt;p&gt;##Julia
Современный язык высокого уровня, предназначенный для высокопроизводительной числовой обработки и статистического анализа. Julia разработали в 2009 году Джефф Безансон, Стефан Карпински, Вирал Б. Шах и Алан Эдельман. Это один из четырех языков, позволяющих достигать производительности суперкомпьютеров на уровне петафлопсов (наряду с C, C ++ и Fortran). Пользуется популярностью в университетах, правительствах и финансовых учреждениях.&lt;/p&gt;
&lt;p&gt;Области применения: финансовый анализ, математические исследования, научные вычисления.&lt;/p&gt;
&lt;p&gt;##Kotlin
Kotlin, разработанный для взаимодействия с Java, оснащен возможностями функционального программирования и функциями ООП, включая работу с ламбда-выражениями, перегрузку операторов и так далее. В 2019 году Google назвал Kotlin предпочтительным языком для разработки под Android, поэтому его точно стоит изучить тем, кто планирует создавать приложения для Android и плагины для популярных SDK.&lt;/p&gt;
&lt;p&gt;Области применения: приложения для Android, разработка на стороне сервера, а также все сферы, где используется Java.&lt;/p&gt;
&lt;p&gt;##Lisp
Lisp — это группа языков, связанных с исторической реализацией LISP, которая была разработана в MIT в 1950-х годах для описания программ математическим способом. Синтаксис в Lisp основан на s-выражениях — это отличает его от большинства других языков, многие из которых связаны с С или находятся под его влиянием. Lisp был популярен в ранних исследованиях ИИ и широко применялся как язык скриптов для САПР и других инженерных приложений, так как он воспринимает код в виде данных и позволяет настраивать язык с помощью макросов , что отличает его от более статичных языков. Среди известных приложений на его основе —AutoLisp (скрипт для AutoCad) и Roomba. Один из языков семейства, Clojure, особенно удобен для создания масштабных приложений для бизнеса и интернета.&lt;/p&gt;
&lt;p&gt;Области применения: искусственный интеллект, робототехника, написание скриптов, расширения языков, исследования, разработка.&lt;/p&gt;
&lt;p&gt;##Lua
Lua был разработан в 1993 году Роберто Иерузалимски для встраивания в другие приложения. Сейчас он широко используется в качестве языка скриптов для добавления новых функций в программы. Например, с его помощью можно дополнять описание игровой логики при разработке видеоигр или расширить набор пользовательских функций в графических приложениях.&lt;/p&gt;
&lt;p&gt;Области применения: расширения программного обеспечения, игровая логика, автоматизация, электроника / интернет вещей.&lt;/p&gt;
&lt;p&gt;##PowerShell
PowerShell был разработан Microsoft в 2006 году для предоставления Unix-подобных функций интерфейса командной строки в Windows. Позже он был выпущен с открытым исходным кодом и портирован на macOS, CentOS и Ubuntu. PowerShell широко применяется в системах, использующих Windows Server и другие технологии Microsoft: он делает администрирование удобнее и снижает затраты на обслуживание.&lt;/p&gt;
&lt;p&gt;Области применения: системное администрирование Windows, интерфейс командной строки, скрипты, обслуживание.&lt;/p&gt;
&lt;p&gt;##Python
Python, представленные в 1991 году Гвидо ван Россумом, был задуман как хорошо читаемый язык с функциями ООП, предполагающий использование функциональных парадигм для построения чистых и хорошо организованных программ. Python пользуется поддержкой крупных платформ и применяется в самых разных сферах, в том числе в науке, интеллектуальной обработке данных, разработке систем искусственного интеллекта, компьютерной графике для художественных фильмов, облачных вычислениях, разработке игр и многих других. Python хорошо зарекомендовал себя и останется одним из наиболее востребованных инструментов в течение долгого времени.&lt;/p&gt;
&lt;p&gt;Области применения: искусственный интеллект / машинное обучение, интеллектуальная обработка данных, облачные сервисы / веб, медиа, скрипты.&lt;/p&gt;
&lt;p&gt;##R
R был выпущен в 1995 году для статистических вычислений и выполнения других сложных математических операций, связанных с анализом данных и графикой. Корпорация Fortune 500 часто использует R для проведения комплексного анализа рисков, тенденций поведения клиентов и других задач, требующих большого количества вычислений. R отличается от многих языков статистики, а его синтаксис на основе s-выражений напоминает Lisp. Несмотря на то, что для других целей R используется редко, он считается стандартом в сфере аналитики данных, особенно для прогнозирования рынков или анализа пользовательских тенденций.&lt;/p&gt;
&lt;p&gt;Области применения: интеллектуальная обработка данных, прогнозная аналитика, графика.&lt;/p&gt;
&lt;p&gt;##Ruby
Ruby был разработан Юкихиро Мацумото в 1995 году в качестве объектно-ориентированного языка скриптов, чтобы компенсировать отсутствие функций ООП в других скриптовых языках программирования того времени. Наличие таких функций, как динамическая типизация, наследование, отражение и перегрузка операторов, делают его идеальным для созданий сложных скриптов и приложений для веб-серверов.&lt;/p&gt;
&lt;p&gt;Области применения: сложные скрипты, управление пакетами, утилиты, веб-сервера.&lt;/p&gt;
&lt;p&gt;##Rust
Rust — это мультипарадигмальный язык, предназначенный для создания крупных параллельных систем, обладающих высокой производительностью и надежностью. С 2016 года Rust ежегодно признавался самым популярным языком программирования в опросе StackOverflow. Будучи языком системного уровня, похожим на C ++ и не требующим длительной обработки или наличия виртуальной машины, Rust обеспечивает низкоуровневый доступ к оборудованию. Благодаря этому он идеально подходит для разработки операционных систем, программ для микроконтроллеров и другого софта, в котором решающее значение имеет производительность железа.&lt;/p&gt;
&lt;p&gt;Области применения: разработка ОС, встроенные приложения, сервера, инструменты, игры.&lt;/p&gt;
&lt;p&gt;##SQL
SQL относится к универсальным языкам программирования, но является мощным предметно-ориентированным языком для управления реляционными базами данных. Способы его применения — от хранилищ данных Fortune 500 до встроенного SQLite — широко используются в десктопных и мобильных приложениях. На многих позициях в ИТ и разработке необходимо хотя бы базовое знание SQL. Расширенные навыки позволяют разработчику создавать чрезвычайно безопасные и надежные правила предметной области, не зависящие от языка программирования или используемого SDK. Высокопрофильные реализации включают в себя Microsoft SQL Server, Oracle Database и PostgreSQL. Каждая из них обладает уникальным расширением языка SQL и предлагает новые функции, выходящие за рамки базовой спецификации SQL. Изучение SQL не займет много времени и пригодится во многих областях от аналитики и обработки данных до управления в сфере ИТ и разработки программного обеспечения.&lt;/p&gt;
&lt;p&gt;Области применения: работа с реляционными данными, встраивание данных в приложения.&lt;/p&gt;
&lt;p&gt;##Swift
Swift был выпущен Apple в 2014 году в качестве замены Objective-C в их продуктах (аналогично тому, как Kotlin заменил Java для Android). Swift сохраняет некоторые функции Objective-C (такие как динамическая диспетчеризация), используемые в программном обеспечении продуктов Apple, но отличается повышенной безопасностью и измененным синтаксисом, более близким к C # или Java.&lt;/p&gt;
&lt;p&gt;Области применения: создание приложений для macOS, iOS, watchOS и так далее.&lt;/p&gt;
&lt;p&gt;##TypeScript
TypeScript — это язык с открытым исходным кодом от Microsoft, разработанный для добавления функций ООП в JavaScript и повышения удобства работы со сложными приложениями. TypeScript, представленный в 2012 году, обычно используется для создания надежных масштабируемых веб-приложений, сред и других программ — например, популярного редактора VS Code.&lt;/p&gt;
&lt;p&gt;Области применения: веб-интерфейс, разработка программного интерфейса, игры, масштабирование любого программного обеспечения JavaScript.&lt;/p&gt;
&lt;p&gt;Вывод
Для успешной карьеры в ИТ нужно владеть хотя бы несколькими языками из данного списка. У каждого из них есть свои сильные и слабые стороны: эффективнее всего использовать преимущества конкретной среды и искать другие инструменты для тех областей, в которых система работает не так успешно. Если какой-то язык не подходит для решения определенной задачи, найдите тот, который пригодится больше. Существует множество стилей программирования и десятки шаблонов проектирования для каждого из перечисленных языков.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

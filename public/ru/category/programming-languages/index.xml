<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming languages | Academic</title>
    <link>https://dankodmitry.github.io/ru/category/programming-languages/</link>
      <atom:link href="https://dankodmitry.github.io/ru/category/programming-languages/index.xml" rel="self" type="application/rss+xml" />
    <description>programming languages</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>ru-ru</language><lastBuildDate>Sat, 04 Jun 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://dankodmitry.github.io/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>programming languages</title>
      <link>https://dankodmitry.github.io/ru/category/programming-languages/</link>
    </image>
    
    <item>
      <title>Система инициализации System V</title>
      <link>https://dankodmitry.github.io/ru/post/%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0-%D0%B8%D0%BD%D0%B8%D1%86%D0%B8%D0%B0%D0%BB%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D0%B8-sysv/</link>
      <pubDate>Sat, 04 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://dankodmitry.github.io/ru/post/%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0-%D0%B8%D0%BD%D0%B8%D1%86%D0%B8%D0%B0%D0%BB%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D0%B8-sysv/</guid>
      <description>&lt;h1 id=&#34;--что-это-и-зачем&#34;&gt;- Что это и зачем?&lt;/h1&gt;
&lt;p&gt;System V — одна из версий операционной системы Unix, выпущенная в 1983 году.&lt;/p&gt;
&lt;p&gt;Система инициализации в UNIX и Linux - набор программ для управления формированием рабочей среды: текстовое/графическое рабочее окружение или служебный узел вычислительной сети. Традиционное имя основной программы - init (&amp;ldquo;инИт&amp;rdquo;). Её PID = 1.&lt;/p&gt;
&lt;p&gt;Init является родителем всех процессов. Его главная задача — создавать процессы по сценарию из файла /etc/inittab. В этом файле обычно содержатся записи, указывающие init породить getty для каждой линии, по которой пользователи могут входить в систему. Он также контролирует автономные процессы, требуемые какой-либо системе. Уровень выполнения — программная конфигурация системы, которая позволяет существовать только заданной группе процессов. Процессы, порождаемые init на каждом из таких уровней выполнения, определяются в файле /etc/inittab.&lt;/p&gt;
&lt;p&gt;По сути init организует и поддерживает всё пользовательское пространство, что включает в себя также проверку и монтирование файловых систем, запуск нужных пользовательских служб и, переключение в пользовательскую среду, когда запуск системы завершится.&lt;/p&gt;
&lt;h1 id=&#34;--как-работает&#34;&gt;- Как работает?&lt;/h1&gt;
&lt;p&gt;Системы инициализации запускают демоны силами сценариев, причем каждый из сценариев осуществляет запуск одного демона, а каждый следующий сценарий ожидает завершения исполнения предыдущего сценария.&lt;/p&gt;
&lt;p&gt;Демон (daemon) является процессом, который выполняется в фоновом режиме без связи с графическим интерфейсом или терминалом. Обычно демоны запускаются при загрузке системы и находятся в рабочем состоянии вплоть до момента завершения работы системы. В современной технической документации демоны чаще всего называются службами (services).&lt;/p&gt;
&lt;h2 id=&#34;процесс-с-идентификатором-1&#34;&gt;Процесс с идентификатором 1&lt;/h2&gt;
&lt;p&gt;Системный загрузчик передает контроль над системой ядру ОС. После непродолжительного периода времени ядро ОС запускает демон системы инициализации. Этот демон системы инициализации (/sbin/init) является первым демоном, запущенным в рамках системы, поэтому соответствующий процесс получает идентификатор 1 (PID 1). Демон системы инициализации никогда не завершает свою работу.&lt;/p&gt;
&lt;h2 id=&#34;параметры-конфигурации-в-файле-etcinittab&#34;&gt;Параметры конфигурации в файле /etc/inittab&lt;/h2&gt;
&lt;p&gt;После того, как исполняется бинарный файл /sbin/init, в первую очередь осуществляется чтение конфигурационного файла /etc/inittab. В данном файле демон будет искать значение переменной initdefault (равное 3 в примере ниже).&lt;/p&gt;
&lt;h2 id=&#34;переменная-initdefault&#34;&gt;Переменная initdefault&lt;/h2&gt;
&lt;p&gt;С помощью значения переменной initdefault указывается стандартный уровень исполнения (default runlevel). В некоторых дистрибутивах Linux в файле /etc/inittab приводится краткое описание уровней исполнения подобное приведенному ниже переведенному описанию из соответствующего файла дистрибутива Red Hat Enterprise Linux 4.&lt;/p&gt;
&lt;p&gt;Уровень исполнения 0 соответствует отключению системы. Уровень исполнения 1 используется для устранения неполадок, так как осуществить вход в систему может исключительно пользователь root, причем для входа в систему может использоваться исключительно консоль. Уровень исполнения 3 типичен для серверов, а уровень исполнения 5 - для настольных компьютеров (на которых вход в систему осуществляется в графическом режиме). За исключением уровней исполнения 0, 1 и 6, различные уровни исполнения могут отличаться в зависимости от дистрибутива. К примеру, в дистрибутиве Debian и производных дистрибутивах Linux на уровнях исполнения 2 и 5 имеется возможность входа в систему с использованием сетевого соединения и графического интерфейса. Исходя из этого, следует всегда сверяться с корректным описанием уровней исполнения вашей системы.&lt;/p&gt;
&lt;h2 id=&#34;сценарий-sysinit&#34;&gt;Сценарий sysinit&lt;/h2&gt;
&lt;p&gt;Сценарий /etc/rc.d/rc.sysinit&lt;/p&gt;
&lt;p&gt;Следующая строка файла конфигурации /etc/inittab в дистрибутиве Red Hat и производных дистрибутивах выглядит следующим образом:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;si::sysinit:/etc/rc.d/rc.sysinit&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Эта запись означает, что независимо от выбранного уровня исполнения система инициализации будет исполнять сценарий /etc/rc.d/rc.sysinit. Этот сценарий осуществляет инициализацию аппаратного обеспечения, устанавливает значения некоторых основных переменных окружения, заполняет файл /etc/mtab в процессе монтирования файловых систем, подключает раздел подкачки, а также выполняет другие необходимые действия.&lt;/p&gt;
&lt;p&gt;Приведенная выше команда egrep может быть заменена на аналогичную приведенную ниже команду grep:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;grep &amp;ldquo;^# Ini∥Sta∥Che&amp;rdquo;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;сценарии-инициализации&#34;&gt;Сценарии инициализации&lt;/h2&gt;
&lt;p&gt;Демон инициализации продолжит чтение конфигурационного файла /etc/inittab и перейдет к приведенной секции:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;l0:0:wait:/etc/rc.d/rc 0
l1:1:wait:/etc/rc.d/rc 1
l2:2:wait:/etc/rc.d/rc 2
l3:3:wait:/etc/rc.d/rc 3
l4:4:wait:/etc/rc.d/rc 4
l5:5:wait:/etc/rc.d/rc 5
l6:6:wait:/etc/rc.d/rc 6&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;демон инициализации должен осуществить запуск сценария инициализации с единственным параметром, который соответствует уровню исполнения. На самом деле поля в конфигурационном файле /etc/inittab разделены с помощью символов двоеточия. Второе поле описывает уровень исполнения на котором команда из данной строки должна быть выполнена. Таким образом, в обоих случаях происходит выполнение только одной из семи команд в зависимости от текущего уровня исполнения, установленного с помощью переменной initdefault.&lt;/p&gt;
&lt;h2 id=&#34;директории-для-хранения-сценариев-инициализации&#34;&gt;Директории для хранения сценариев инициализации&lt;/h2&gt;
&lt;p&gt;Если рассмотрим содержимое одной из директорий /etc/rcX.d/, вы можете обнаружить множество сценариев (или ссылок на сценарии), имена которых начинаются либо с буквы K, либо с буквы S в верхнем регистре.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[root@RHEL52 rc3.d]# ls -l | tail -4
lrwxrwxrwx 1 root root 19 окт 11  2008 S98haldaemon -&amp;gt; ../init.d/haldaemon
lrwxrwxrwx 1 root root 19 окт 11  2008 S99firstboot -&amp;gt; ../init.d/firstboot
lrwxrwxrwx 1 root root 11 янв 21 04:16 S99local -&amp;gt; ../rc.local
lrwxrwxrwx 1 root root 16 янв 21 04:17 S99smartd -&amp;gt; ../init.d/smartd&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Директории /etc/rcX.d/ содержат только ссылки на сценарии, расположенные в директории /etc/init.d/. Благодаря ссылкам появляется возможность использования сценариев с отличными именами. При переходе на новый уровень исполнения все сценарии, имена которых начинаются с буквы K или буквы S в верхнем регистре начинают исполняться после сортировки по именам в алфавитном порядке. Сценарии, имена которых начинаются с буквы K, будут исполняться в первую очередь с передачей единственного параметра stop. Остальные сценарии, имена которых начинаются с буквы S, будут исполняться с передачей единственного параметра start.&lt;/p&gt;
&lt;p&gt;Все эти операции выполняются силами сценария /etc/rc.d/rc в дистрибутиве Red Hat и сценария /etc/init.d/rc в дистрибутиве Debian.&lt;/p&gt;
&lt;h2 id=&#34;демоны-mingetty&#34;&gt;Демоны mingetty&lt;/h2&gt;
&lt;p&gt;Описание демонов mingetty в конфигурационном файле /etc/inittab&lt;/p&gt;
&lt;p&gt;Практически в конце конфигурационного файла /etc/inittab находится секция с описанием условий запуска и перезапуска нескольких демонов mingetty.&lt;/p&gt;
&lt;h3 id=&#34;run-gettys-in-standard-runlevels-запуск-gettys-на-различных-уровнях-исполнения&#34;&gt;Run gettys in standard runlevels (Запуск gettys на различных уровнях исполнения)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;1:2345:respawn:/sbin/mingetty tty1
2:2345:respawn:/sbin/mingetty tty2
3:2345:respawn:/sbin/mingetty tty3
4:2345:respawn:/sbin/mingetty tty4
5:2345:respawn:/sbin/mingetty tty5
6:2345:respawn:/sbin/mingetty tty6&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;демоны-mingetty-и-исполняемый-файл-binlogin&#34;&gt;Демоны mingetty и исполняемый файл /bin/login&lt;/h3&gt;
&lt;p&gt;Демон /sbin/mingetty выводит сообщение в виртуальной консоли и позволяет вам ввести идентификатор пользователя. После этого он выполняет бинарный файл /bin/login с передачей введенного идентификатора пользователя. Программа /bin/login проверяет, присутствует ли информация о пользователе в файле /etc/passwd и запрашивает пароль (а также проверяет его корректность). В том случае, если пароль корректен, программа /bin/login передает управление командной оболочке, установленной в файле /etc/passwd.&lt;/p&gt;
&lt;h4 id=&#34;какие-особенности&#34;&gt;Какие особенности?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Написание файлов запуска служб на bash;&lt;/li&gt;
&lt;li&gt;Последовательный запуск служб;&lt;/li&gt;
&lt;li&gt;Сортировка порядка запуска с помощью номеров в именах файлов;&lt;/li&gt;
&lt;li&gt;Команды для запуска, остановки и проверки состояния служб.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Языки программирования</title>
      <link>https://dankodmitry.github.io/ru/post/scientific-programming-languages/</link>
      <pubDate>Sat, 28 May 2022 00:00:00 +0000</pubDate>
      <guid>https://dankodmitry.github.io/ru/post/scientific-programming-languages/</guid>
      <description>&lt;p&gt;#Сегодня в мире существуют сотни языков программирования. Каждый из нах обладает сильными и слабыми сторонами. Поговорим о самых известных и востребованных.&lt;/p&gt;
&lt;p&gt;##Bash
Сценарии командной оболочки Unix, созданные Кеном Томпсоном в начале 1970-х годов, тесно связаны с языком программирования C. Bash — обновленная оболочка Unix — была впервые выпущена в конце 80-х годов и до сих пор активно разрабатывается. На Bash обычно пишутся сценарии конфигурации сервера, поэтому это хороший выбор для работы в современных облачных средах с контейнерным хранением и микросервисами. Скрипты командной оболочки используются достаточно часто, так что знание этого языка пригодится.&lt;/p&gt;
&lt;p&gt;Также стоит обратить внимание на zsh, который в настоящее время является оболочкой по умолчанию в macOS.&lt;/p&gt;
&lt;p&gt;Области применения: администрирование сервера, инструменты интерфейса командной строки, DevOps, виртуализация.&lt;/p&gt;
&lt;p&gt;##COBOL
Один из старейших языков, используемых до сих пор, был создан Грейс Хоппер в конце 1950-х годов и предназначался для стандартизации разработки крупномасштабных бизнес-приложений на компьютерах. Блестящая концепция, которая до сих пор применяется в кроссплатформенных SDK. Через системы COBOL проходят невероятные 95% транзакций ATM, причем многие из этих устройств работают круглосуточно 365 дней в году. Такие поставщики устройств, как IBM, разрабатывают более мощные машины, предназначенные для COBOL, но продолжают обслуживать и обновлять существующие системы из-за затрат и рисков, связанных с их заменой. В ближайшее время COBOL никуда не уйдет. Это хороший выбор для тех, кто хочет работать с клиентами из финансовой сферы.&lt;/p&gt;
&lt;p&gt;Области применения: банковское дело / финансы, международные корпорации, правительства.&lt;/p&gt;
&lt;p&gt;￼
##C/C++
Эти языки часто занимают вершины различных рейтингов — их ценят за мощность и быстродействие. C был создан в начале 1970-х годов Деннисом Ритчи, C ++ в 1985 году разработал Бьёрн Страуструп. Сегодня два этих языка лежат в основе всего: от ОС и игр до современных научных вычислений и машинного обучения. C и C++ хорошо подходят для требовательных приложений, которым важны низкоуровневый доступ к оборудованию и производительность. Для освоения этих языков нужно время и определенные усилия.&lt;/p&gt;
&lt;p&gt;Область применения: разработка ОС / SDK, встроенные устройства, игровые движки, наука.&lt;/p&gt;
&lt;p&gt;Читайте также:
Какой язык программирования выбрать для изучения и как его быстро выучить?
Популярный, востребованный, доступный: как выбрать язык программирования
Пять языков программирования для начинающих&lt;/p&gt;
&lt;p&gt;##C#
C#, выпущенный Microsoft в 2000 году, был разработан Андерсом Хейлсбергом как кроссплатформенный язык объектно-ориентированного программирования. Сейчас он часто используется для разработки бизнес-приложений, API, игр и многого другого. Благодаря широкому набору функций этот язык подходит для работы с графикой и других задач асинхронного программирования.&lt;/p&gt;
&lt;p&gt;Области применения: корпоративные приложения, разработка программного и пользовательского интерфейса, игры, графика.&lt;/p&gt;
&lt;p&gt;##Dart
Современный язык, разработанный в Google для создания мобильных, десктопных, веб-и серверных приложений. Его создатель Ларс Бак также придумал JavaSript Engine V8. Dart напоминает другие современные языки объектно-ориентированного программирования — C #, TypeScript и Java — и предоставляет обширный набор функций, подходящих для определения сложных взаимодействий, асинхронных операций, анимации и других задач.&lt;/p&gt;
&lt;p&gt;Области применения: кроссплатформенные приложения, облачные сервисы / корпоративные системы, игры, графика.&lt;/p&gt;
&lt;p&gt;##Fortran
Fortran, разработанный в IBM в 1950-х годах Джоном Бакусом, — это язык общего назначения, который был создан для проведения научных и инженерных работ. Он до сих пор широко используется в этих целях, в том числе для контрольного тестирования самых быстрых суперкомпьютеров в мире. Он также применялся в космических и физических исследованиях и моделировании погоды.&lt;/p&gt;
&lt;p&gt;Области применения: аэрокосмическая/оборонная промышленность, научные вычисления, численный анализ.&lt;/p&gt;
&lt;p&gt;##Java
Java — это ООП-язык общего назначения, разработанный в 1990-х годах Джеймсом Гослингом в Sun (сейчас принадлежит Oracle) и предназначенный для компиляции в байт-код для запуска на виртуальной машине Java. К 2020 году к ним относятся практически все виды устройств — от телевизоров и игровых приставок до серверов, телефонов и даже кухонных приборов. Язык широко распространен в корпорациях и университетах, что сделало его популярным как среди начинающих программистов, так и среди опытных разработчиков.&lt;/p&gt;
&lt;p&gt;Области применения: корпоративные приложения, встроенные системы, веб-сервисы, игры.&lt;/p&gt;
&lt;p&gt;##JavaScript
JavaScript разработал Брэндон Айх в 1990-х годах, чтобы добавлять выполнение скриптов на сайты. Сегодня это универсальный язык веб-интерфейса с мощными стандартизированными функциями, которые поддерживаются всеми основными браузерами. JavaScript соответствует стандарту EcmaScript, который обновляется каждые несколько лет с добавлением новых спецификаций языка. Кроме того, JavaScript часто используется для разработки серверных служб и API, мобильных приложений, игр и другого программного обеспечения. Это отличный выбор для изучения и дальнейшего совершенствования.&lt;/p&gt;
&lt;p&gt;Области применения: фулстэк-разработка, облачные сервисы / контейнерное хранение, игры, утилиты.&lt;/p&gt;
&lt;p&gt;##Julia
Современный язык высокого уровня, предназначенный для высокопроизводительной числовой обработки и статистического анализа. Julia разработали в 2009 году Джефф Безансон, Стефан Карпински, Вирал Б. Шах и Алан Эдельман. Это один из четырех языков, позволяющих достигать производительности суперкомпьютеров на уровне петафлопсов (наряду с C, C ++ и Fortran). Пользуется популярностью в университетах, правительствах и финансовых учреждениях.&lt;/p&gt;
&lt;p&gt;Области применения: финансовый анализ, математические исследования, научные вычисления.&lt;/p&gt;
&lt;p&gt;##Kotlin
Kotlin, разработанный для взаимодействия с Java, оснащен возможностями функционального программирования и функциями ООП, включая работу с ламбда-выражениями, перегрузку операторов и так далее. В 2019 году Google назвал Kotlin предпочтительным языком для разработки под Android, поэтому его точно стоит изучить тем, кто планирует создавать приложения для Android и плагины для популярных SDK.&lt;/p&gt;
&lt;p&gt;Области применения: приложения для Android, разработка на стороне сервера, а также все сферы, где используется Java.&lt;/p&gt;
&lt;p&gt;##Lisp
Lisp — это группа языков, связанных с исторической реализацией LISP, которая была разработана в MIT в 1950-х годах для описания программ математическим способом. Синтаксис в Lisp основан на s-выражениях — это отличает его от большинства других языков, многие из которых связаны с С или находятся под его влиянием. Lisp был популярен в ранних исследованиях ИИ и широко применялся как язык скриптов для САПР и других инженерных приложений, так как он воспринимает код в виде данных и позволяет настраивать язык с помощью макросов , что отличает его от более статичных языков. Среди известных приложений на его основе —AutoLisp (скрипт для AutoCad) и Roomba. Один из языков семейства, Clojure, особенно удобен для создания масштабных приложений для бизнеса и интернета.&lt;/p&gt;
&lt;p&gt;Области применения: искусственный интеллект, робототехника, написание скриптов, расширения языков, исследования, разработка.&lt;/p&gt;
&lt;p&gt;##Lua
Lua был разработан в 1993 году Роберто Иерузалимски для встраивания в другие приложения. Сейчас он широко используется в качестве языка скриптов для добавления новых функций в программы. Например, с его помощью можно дополнять описание игровой логики при разработке видеоигр или расширить набор пользовательских функций в графических приложениях.&lt;/p&gt;
&lt;p&gt;Области применения: расширения программного обеспечения, игровая логика, автоматизация, электроника / интернет вещей.&lt;/p&gt;
&lt;p&gt;##PowerShell
PowerShell был разработан Microsoft в 2006 году для предоставления Unix-подобных функций интерфейса командной строки в Windows. Позже он был выпущен с открытым исходным кодом и портирован на macOS, CentOS и Ubuntu. PowerShell широко применяется в системах, использующих Windows Server и другие технологии Microsoft: он делает администрирование удобнее и снижает затраты на обслуживание.&lt;/p&gt;
&lt;p&gt;Области применения: системное администрирование Windows, интерфейс командной строки, скрипты, обслуживание.&lt;/p&gt;
&lt;p&gt;##Python
Python, представленные в 1991 году Гвидо ван Россумом, был задуман как хорошо читаемый язык с функциями ООП, предполагающий использование функциональных парадигм для построения чистых и хорошо организованных программ. Python пользуется поддержкой крупных платформ и применяется в самых разных сферах, в том числе в науке, интеллектуальной обработке данных, разработке систем искусственного интеллекта, компьютерной графике для художественных фильмов, облачных вычислениях, разработке игр и многих других. Python хорошо зарекомендовал себя и останется одним из наиболее востребованных инструментов в течение долгого времени.&lt;/p&gt;
&lt;p&gt;Области применения: искусственный интеллект / машинное обучение, интеллектуальная обработка данных, облачные сервисы / веб, медиа, скрипты.&lt;/p&gt;
&lt;p&gt;##R
R был выпущен в 1995 году для статистических вычислений и выполнения других сложных математических операций, связанных с анализом данных и графикой. Корпорация Fortune 500 часто использует R для проведения комплексного анализа рисков, тенденций поведения клиентов и других задач, требующих большого количества вычислений. R отличается от многих языков статистики, а его синтаксис на основе s-выражений напоминает Lisp. Несмотря на то, что для других целей R используется редко, он считается стандартом в сфере аналитики данных, особенно для прогнозирования рынков или анализа пользовательских тенденций.&lt;/p&gt;
&lt;p&gt;Области применения: интеллектуальная обработка данных, прогнозная аналитика, графика.&lt;/p&gt;
&lt;p&gt;##Ruby
Ruby был разработан Юкихиро Мацумото в 1995 году в качестве объектно-ориентированного языка скриптов, чтобы компенсировать отсутствие функций ООП в других скриптовых языках программирования того времени. Наличие таких функций, как динамическая типизация, наследование, отражение и перегрузка операторов, делают его идеальным для созданий сложных скриптов и приложений для веб-серверов.&lt;/p&gt;
&lt;p&gt;Области применения: сложные скрипты, управление пакетами, утилиты, веб-сервера.&lt;/p&gt;
&lt;p&gt;##Rust
Rust — это мультипарадигмальный язык, предназначенный для создания крупных параллельных систем, обладающих высокой производительностью и надежностью. С 2016 года Rust ежегодно признавался самым популярным языком программирования в опросе StackOverflow. Будучи языком системного уровня, похожим на C ++ и не требующим длительной обработки или наличия виртуальной машины, Rust обеспечивает низкоуровневый доступ к оборудованию. Благодаря этому он идеально подходит для разработки операционных систем, программ для микроконтроллеров и другого софта, в котором решающее значение имеет производительность железа.&lt;/p&gt;
&lt;p&gt;Области применения: разработка ОС, встроенные приложения, сервера, инструменты, игры.&lt;/p&gt;
&lt;p&gt;##SQL
SQL относится к универсальным языкам программирования, но является мощным предметно-ориентированным языком для управления реляционными базами данных. Способы его применения — от хранилищ данных Fortune 500 до встроенного SQLite — широко используются в десктопных и мобильных приложениях. На многих позициях в ИТ и разработке необходимо хотя бы базовое знание SQL. Расширенные навыки позволяют разработчику создавать чрезвычайно безопасные и надежные правила предметной области, не зависящие от языка программирования или используемого SDK. Высокопрофильные реализации включают в себя Microsoft SQL Server, Oracle Database и PostgreSQL. Каждая из них обладает уникальным расширением языка SQL и предлагает новые функции, выходящие за рамки базовой спецификации SQL. Изучение SQL не займет много времени и пригодится во многих областях от аналитики и обработки данных до управления в сфере ИТ и разработки программного обеспечения.&lt;/p&gt;
&lt;p&gt;Области применения: работа с реляционными данными, встраивание данных в приложения.&lt;/p&gt;
&lt;p&gt;##Swift
Swift был выпущен Apple в 2014 году в качестве замены Objective-C в их продуктах (аналогично тому, как Kotlin заменил Java для Android). Swift сохраняет некоторые функции Objective-C (такие как динамическая диспетчеризация), используемые в программном обеспечении продуктов Apple, но отличается повышенной безопасностью и измененным синтаксисом, более близким к C # или Java.&lt;/p&gt;
&lt;p&gt;Области применения: создание приложений для macOS, iOS, watchOS и так далее.&lt;/p&gt;
&lt;p&gt;##TypeScript
TypeScript — это язык с открытым исходным кодом от Microsoft, разработанный для добавления функций ООП в JavaScript и повышения удобства работы со сложными приложениями. TypeScript, представленный в 2012 году, обычно используется для создания надежных масштабируемых веб-приложений, сред и других программ — например, популярного редактора VS Code.&lt;/p&gt;
&lt;p&gt;Области применения: веб-интерфейс, разработка программного интерфейса, игры, масштабирование любого программного обеспечения JavaScript.&lt;/p&gt;
&lt;p&gt;Вывод
Для успешной карьеры в ИТ нужно владеть хотя бы несколькими языками из данного списка. У каждого из них есть свои сильные и слабые стороны: эффективнее всего использовать преимущества конкретной среды и искать другие инструменты для тех областей, в которых система работает не так успешно. Если какой-то язык не подходит для решения определенной задачи, найдите тот, который пригодится больше. Существует множество стилей программирования и десятки шаблонов проектирования для каждого из перечисленных языков.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
